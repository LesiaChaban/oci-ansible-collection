#!/usr/bin/python
# Copyright (c) 2020, 2022 Oracle and/or its affiliates.
# This software is made available to you under the terms of the GPL 3.0 license or the Apache 2.0 license.
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# Apache License v2.0
# See LICENSE.TXT for details.
# GENERATED FILE - DO NOT EDIT - MANUAL CHANGES WILL BE OVERWRITTEN


from __future__ import absolute_import, division, print_function

__metaclass__ = type

ANSIBLE_METADATA = {
    "metadata_version": "1.1",
    "status": ["preview"],
    "supported_by": "community",
}

DOCUMENTATION = """
---
module: oci_adm_application_dependency_vulnerability_facts
short_description: Fetches details about one or multiple ApplicationDependencyVulnerability resources in Oracle Cloud Infrastructure
description:
    - Fetches details about one or multiple ApplicationDependencyVulnerability resources in Oracle Cloud Infrastructure
    - Returns a list of Application Dependencies with their associated vulnerabilities.
version_added: "2.9.0"
author: Oracle (@oracle)
options:
    vulnerability_audit_id:
        description:
            - Unique Vulnerability Audit identifier path parameter.
        type: str
        required: true
    vulnerability_id:
        description:
            - A filter to return only Vulnerability Audits that match the specified id.
        type: str
    cvss_v3_greater_than_or_equal:
        description:
            - A filter that returns only Vulnerability Audits that have a Common Vulnerability Scoring System Version 3 (CVSS V3) greater or equal than the
              specified value.
        type: float
    cvss_v2_greater_than_or_equal:
        description:
            - A filter that returns only Vulnerability Audits that have a Common Vulnerability Scoring System Version 2 (CVSS V2) greater or equal than the
              specified value.
        type: float
    sort_order:
        description:
            - The sort order to use, either 'ASC' or 'DESC'.
        type: str
        choices:
            - "ASC"
            - "DESC"
    sort_by:
        description:
            - The field to sort by. Only one sort order may be provided.
              Default order for gav is ascending where ascending corresponds to alphanumerical order.
              Default order for nodeId is ascending where ascending corresponds to alphanumerical order.
        type: str
        choices:
            - "gav"
            - "nodeId"
    gav:
        description:
            - A filter to return only resources that match the entire GAV (Group Artifact Version) identifier given.
        type: str
extends_documentation_fragment: [ oracle.oci.oracle ]
"""

EXAMPLES = """
- name: List application_dependency_vulnerabilities
  oci_adm_application_dependency_vulnerability_facts:
    # required
    vulnerability_audit_id: "ocid1.vulnerabilityaudit.oc1..xxxxxxEXAMPLExxxxxx"

    # optional
    vulnerability_id: "ocid1.vulnerability.oc1..xxxxxxEXAMPLExxxxxx"
    cvss_v3_greater_than_or_equal: 3.4
    cvss_v2_greater_than_or_equal: 3.4
    sort_order: ASC
    sort_by: gav
    gav: gav_example

"""

RETURN = """
application_dependency_vulnerabilities:
    description:
        - List of ApplicationDependencyVulnerability resources
    returned: on success
    type: complex
    contains:
        gav:
            description:
                - Unique Group Artifact Version (GAV) identifier (Group:Artifact:Version), e.g. org.graalvm.nativeimage:svm:21.1.0.
            returned: on success
            type: str
            sample: gav_example
        node_id:
            description:
                - Unique identifier of an Application Dependency node, e.g. nodeId1.
            returned: on success
            type: str
            sample: "ocid1.node.oc1..xxxxxxEXAMPLExxxxxx"
        application_dependency_node_ids:
            description:
                - List of (Application Dependencies) node identifiers on which this node depends.
            returned: on success
            type: list
            sample: []
        vulnerabilities:
            description:
                - List of vulnerabilities for the Application Dependency.
            returned: on success
            type: complex
            contains:
                id:
                    description:
                        - Unique vulnerability identifier, e.g. CVE-1999-0067.
                    returned: on success
                    type: str
                    sample: "ocid1.resource.oc1..xxxxxxEXAMPLExxxxxx"
                cvss_v2_score:
                    description:
                        - Common Vulnerability Scoring System (CVSS) Version 2.
                    returned: on success
                    type: float
                    sample: 3.4
                cvss_v3_score:
                    description:
                        - Common Vulnerability Scoring System (CVSS) Version 3.
                    returned: on success
                    type: float
                    sample: 3.4
                is_ignored:
                    description:
                        - Indicates if the vulnerability was ignored according to the audit configuration.
                    returned: on success
                    type: bool
                    sample: true
        is_found_in_knowledge_base:
            description:
                - Indicates if the artifact is found in the knowledge base.
            returned: on success
            type: bool
            sample: true
    sample: [{
        "gav": "gav_example",
        "node_id": "ocid1.node.oc1..xxxxxxEXAMPLExxxxxx",
        "application_dependency_node_ids": [],
        "vulnerabilities": [{
            "id": "ocid1.resource.oc1..xxxxxxEXAMPLExxxxxx",
            "cvss_v2_score": 3.4,
            "cvss_v3_score": 3.4,
            "is_ignored": true
        }],
        "is_found_in_knowledge_base": true
    }]
"""

from ansible_collections.oracle.oci.plugins.module_utils import oci_common_utils
from ansible_collections.oracle.oci.plugins.module_utils.oci_resource_utils import (
    OCIResourceFactsHelperBase,
    get_custom_class,
    OCIAnsibleModule,
)

try:
    from oci.adm import ApplicationDependencyManagementClient

    HAS_OCI_PY_SDK = True
except ImportError:
    HAS_OCI_PY_SDK = False


class ApplicationDependencyVulnerabilityFactsHelperGen(OCIResourceFactsHelperBase):
    """Supported operations: list"""

    def get_required_params_for_list(self):
        return [
            "vulnerability_audit_id",
        ]

    def list_resources(self):
        optional_list_method_params = [
            "vulnerability_id",
            "cvss_v3_greater_than_or_equal",
            "cvss_v2_greater_than_or_equal",
            "sort_order",
            "sort_by",
            "gav",
        ]
        optional_kwargs = dict(
            (param, self.module.params[param])
            for param in optional_list_method_params
            if self.module.params.get(param) is not None
        )
        return oci_common_utils.list_all_resources(
            self.client.list_application_dependency_vulnerabilities,
            vulnerability_audit_id=self.module.params.get("vulnerability_audit_id"),
            **optional_kwargs
        )


ApplicationDependencyVulnerabilityFactsHelperCustom = get_custom_class(
    "ApplicationDependencyVulnerabilityFactsHelperCustom"
)


class ResourceFactsHelper(
    ApplicationDependencyVulnerabilityFactsHelperCustom,
    ApplicationDependencyVulnerabilityFactsHelperGen,
):
    pass


def main():
    module_args = oci_common_utils.get_common_arg_spec()
    module_args.update(
        dict(
            vulnerability_audit_id=dict(type="str", required=True),
            vulnerability_id=dict(type="str"),
            cvss_v3_greater_than_or_equal=dict(type="float"),
            cvss_v2_greater_than_or_equal=dict(type="float"),
            sort_order=dict(type="str", choices=["ASC", "DESC"]),
            sort_by=dict(type="str", choices=["gav", "nodeId"]),
            gav=dict(type="str"),
        )
    )

    module = OCIAnsibleModule(argument_spec=module_args)

    if not HAS_OCI_PY_SDK:
        module.fail_json(msg="oci python sdk required for this module.")

    resource_facts_helper = ResourceFactsHelper(
        module=module,
        resource_type="application_dependency_vulnerability",
        service_client_class=ApplicationDependencyManagementClient,
        namespace="adm",
    )

    result = []

    if resource_facts_helper.is_list():
        result = resource_facts_helper.list()
    else:
        resource_facts_helper.fail()

    module.exit_json(application_dependency_vulnerabilities=result)


if __name__ == "__main__":
    main()
